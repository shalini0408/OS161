#!/bin/bash

# Configuration script for generating .config.
# Needed to enable/disable certain options per-ASST.
#
# Usage: ./configure <ASST0 | ASST1 | ASST2>
#
# Must be called from the os161 directory (i.e. the directory
# containing kern, etc).

# Check that we're in the right directory.
if ! ( [ -d kern ] && [ -d lib ] && [ -d man ] && [ -d mk ] ); then
    echo $(tput setaf 1)ERROR: $(tput sgr0)$0 was called from the wrong directory.
    echo "Usage: ./configure <ASST0 | ASST1 | ASST2>"
    echo "       i.e. if you're not calling it as ./configure, you're in the wrong directory."
    exit 1
fi

# We also want to test that our OSTREE value makes sense.
# The makefile depends heavily on this, so we should make sure
# it is good.
OSTREE="$(pwd)"

ILLEGAL=" |'|\"|\\\\"

if [[ $OSTREE =~ $ILLEGAL ]]; then
    echo "$(tput setaf 1)ERROR: $(tput sgr0)Your working directory contains illegal characters."
    echo 
    echo "Note: Your directory = $OSTREE/"
    echo
    echo "It is NOT SUPPORTED to work on OS/161 inside a directory whose path contains:"
    echo "- Spaces or other whitespace"
    echo "- Quotes"
    echo "- Backslashes"
    echo
    echo "Please move os161 to a path without any quotes, e.g. ~/os161."
    exit 1
fi

# This test confirms that "$(pwd)" works. Note that this logic does
# work with spaces. Nobody should ever see this error.
if ! ( [ -d "$OSTREE/kern" ] && [ -d "$OSTREE/lib" ] && [ -d "$OSTREE/man" ] && [ -d "$OSTREE/mk" ] ); then
    echo "$(tput setaf 1)ERROR: $(tput sgr0)\$(pwd) returned a nonsensical value."
    echo "We need the value of \$(pwd) for some parts of the Makefile."
    echo
    echo You can manually add it to the .config, but you should be running on Zeus,
    echo where this should work automatically.
    echo
    echo Consider getting in touch with your GTA or asking on Piazza.
    exit 1
fi

# Define a function for generating the config. The only thing that
# changes between each of the three configs is:
# - The config name (ASST0, ASST1, ASST2)
# - Several of the OPT values
# In fact, the only OPT that changes is SYNCHPROBS. So, our function
# takes two arguments:
#   $1: The config name
#   $2: The value of OPT_SYNCHPROBS (y/n)
generate_config () {
    # When we get to this point, we are generating the new config
    # (i.e. we only call this function with valid arguments).

    # Save the old config file if it exists
    if [ -f .config ]; then
        echo "Cleaning up old build..."
        make clean

        # If our config version is different from before,
        # delete the kern/compile/version value so that it
        # resets. Otherwise keep it, because it's the same
        # ASST.
        if ! grep $1 .config; then
            rm -f kern/compile/version
        fi
        mv .config .config.old
    else
        # Delete the old version file also if .config doesn't exist.
        rm -f kern/compile/version
    fi

    # Delete the old kernel so nobody is running an outdated kernel
    echo "Removing old kernel..."
    rm -f root/kernel

    echo Writing new configuration...

    # Write a preamble as well as the MAKEFILE_COLORS option
    cat > .config <<- EOM
# Configuration file for your OS/161 tree.
# 
# This file is a Makefile fragment, i.e. it uses Makefile syntax.
# Other makefiles include it to get definitions for various variables
# important for the kernel build.
# 
# You should generate this file by running the ./configure script in
# the kernel root.
# 
# However, you can edit it manaully if need be. The main option you
# might want to edit is MAKEFILE_COLORS below.

# This option determines whether the makefile will print colors to
# the screen when showing lines like CC, LINK, etc.
#
# Its values are y or n.
#
# If you instead want these lines to just be plain text, change this
# option to MAKEFILE_COLORS=n
MAKEFILE_COLORS=y

# -----------------------------------------------------------------
# There is no real reason to edit anything past this point.
# 
# These options are automatically generated by the configure script,
# and set up to be correct per-ASST.
# -----------------------------------------------------------------

EOM

    # Write the name of the CONFIG. (This is injected into the kernel by the Makefile).
    echo "CONFIG=$1" >> .config
    echo >> .config

    # We always use cs161-gcc and MIPS.
    cat >> .config <<- EOM
CC=cs161-gcc
LD=cs161-gcc
AR=cs161-ar
PLATFORM=mips
EOM

    # Separator
    echo >> .config

    # Write the value of OPT_SYNCHPROBS.
    echo "OPT_SYNCHPROBS=$2" >> .config

    # Write the other options.
    cat >> .config <<- EOM
OPT_DUMBVM=y
OPT_SFS=y
OPT_NET=n
EOM

    # Finally, write the OSTREE value.
    echo "OSTREE=$OSTREE" >> .config

    # Run make clean AGAIN, just to be sure we have as clean of a tree as possible.
    # (i.e., if the old .config was deleted and we couldn't clean up).
    #
    # This won't clean up any files not in the new config, but that's OK.
    echo .config generated, cleaning up...
    make clean

    # We're done!

    echo "$(tput setaf 2)------------------------------------------------------------------------------$(tput sgr0)"
    echo "Your configuration has been written to .config and you are ready to compile!"
    echo 
    echo "Run 'make -j8' for your initial compile (-j8 compiles with 8 threads)"
    echo "$(tput setaf 2)------------------------------------------------------------------------------$(tput sgr0)"
}

case $1 in
    ASST0) generate_config ASST0 n;;
    ASST1) generate_config ASST1 y;;
    ASST2) generate_config ASST2 n;;
    *)
        echo $(tput setaf 1)ERROR: $(tput sgr0)Need an argument of ASST0, ASST1, or ASST2
        echo "Run './configure ASST0' to configure for ASST0, './configure ASST1' for ASST1, and so on"
    ;;
esac