PA1, Part 1 -- Progress Report 

Kaitlin Oâ€™Leary G01372290
Shalini Maknoor G01503797


Lock Design and Implementation 

- Took the semaphores code and used it as a model for the lock implementation. 
- We had four functions for the lock implementation. Each partner implemented two functions. 
- We then tested the complete implementation together using Zeus. 


Problems Encountered 

- We had many syntax errors as we did our first implementation. 
- We continuously modified our logic. 
- When we tested in Zeus, we encountered a kernel hang. Together, we commented out each function and methodically tested each one. We did not 
initialize the flag value in the lock creation function and we accidentally set the lock flag to 0 in lock_acquire() instead of 1. 
- After fixing the issues above, we tested with the menu and got the correct implementation (see screenshot below). 


Correct lock implementation shows: 

sy2
Starting lock test...
Lock test done.
Operation took 2.988475840 seconds 

At this point, we have the project files set up, the lock implementation complete. We are now about to start the design and implementation of 
the traffic management problem. 


Traffic Management Problem Findings 

- Our critical section will be the intersection. The critical section will be different parts of the intersection depending on what route 
the vehicle is taking.  
- Use a priority queue (implemented as a dynamic max heap) for each route so that cars will be prioritized over trucks and cars that arrive 
first will enter the intersection first (FIFO). 
- When turning right, a vehicle only needs to pass through one intersection. The thread (that is the vehicle) will try to acquire the lock for 
the corner of the intersection they go through. They will either execute the turn or sleep and keep checking if the lock is free. 
- When turning left, there are two parts of the intersection the vehicle needs to go through. The thread will check the first part of the 
intersection first. If it is free, it will acquire that lock. If not it will sleep, and then keep checking. Once it has the first lock, it will 
pass through the first part of the intersection. It will then try to acquire the second lock. If it is free, it will release the first lock and 
acquire the second lock and execute the remainder of the turn. If it is not free, it will sleep and check until it can acquire the lock.
- We are concerned this solution might cause starvation among the cars. If a car is waiting for the second lock to turn left, no other cars can 
use the first lock. This may cause excessive bounded waiting. 
