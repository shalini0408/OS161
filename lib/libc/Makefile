TARGET_NAME=libc.a

# Printf implementation
SRCS-y+=__printf.c snprintf.c printf.c

# C files for standard string operations
SRCS-y+=atoi.c bzero.c \
      memcmp.c memcpy.c memmove.c memset.c \
      strcat.c strchr.c strcmp.c strcpy.c strlen.c strrchr.c \
      strtok.c strtok_r.c

# Standard I/O functions
SRCS-y+=__assert.c __puts.c err.c getchar.c putchar.c puts.c 

# Other stuff
SRCS-y+=abort.c errno.c exit.c getcwd.c random.c strerror.c system.c time.c

# Machine-dependent setjmp implementation
SRCS-y+=$(PLATFORM)-setjmp.S

# System call entry points (autogenerated)
GEN-SRCS-y+=syscalls.S

# Build a .a archive
include ../../mk/build-lib.mk

CALLNO_H=$(OSTREE)/kern/include/kern/callno.h

$(abspath syscalls.S): $(CALLNO_H) callno-parse.sh syscalls-$(PLATFORM).S $(OSTREE)/.config
	$(call do-show-gen,$@)
# Use a shell script to generate syscalls.S, so that it is easier to handle
# the temporary file logic correctly.
	@sh gen-syscalls.sh $(PLATFORM) $(CALLNO_H)

# Clean syscalls.S, as it's autogenerated.
clean::
	$(call do-clean,$(abspath syscalls.S))